@mixin flx($flx){
	$wvals:(n:nowrap,w:wrap,r:wrap-reverse);
	$wwvals:(n:single,w:multiple,r:multiple);
	$avals:(s:flex-start,e:flex-end,c:center,b:baseline,f:stretch);
	$jvals:(s:flex-start,e:flex-end,c:center,b:space-between,a:space-around);
	$dvals:(r:row,rr:row-reverse,c:column,cr:column-reverse);
	$wddvals:(r:normal,rr:reverse,c:normal,cc:reverse);
	$wdovals:(r:horizontal,rr:horizontal,c:vertical,cc:vertical);
	display:-webkit-box;
	display:-webkit-flex;
	display:flex;
	@each $key,$val in $flx{
		@if $key == w{
			-webkit-box-lines:map-get($wwvals,$val);
			-webkit-flex-wrap:map-get($wvals,$val);
			flex-wrap:map-get($wvals,$val);
		}
		@if $key == j or $key == jc{
			-webkit-justify-content:map-get($jvals,$val);
			justify-content:map-get($jvals,$val);
		}
		@if $key == v or $key == ac{
			-webkit-align-content:map-get($jvals,$val);
			align-content:map-get($jvals,$val);
		}
		@if $key == ji{
			-webkit-justify-items:map-get($jvals,$val);
			justify-items:map-get($jvals,$val);
		}
		@if $key == a or $key == ai{
			-webkit-align-items:map-get($avals,$val);
			align-items:map-get($avals,$val);
		}
		@if $key == d{
			-webkit-box-direction:map-get($wddvals,$val);
			-webkit-box-orient:map-get($wdovals,$val);
			-webkit-flex-direction:map-get($dvals,$val);
			flex-direction:map-get($dvals,$val);
		}
		@if $key == c{
			@if type-of($val) == 'list'{
				@include flex_equalize(nth($val,1),nth($val,2));
			}
			@else{@include flex_equalize($val);}
		}
	}
}

@mixin flex_container($wrap:wrap,$justify:space-around,$direction:row){
	display:-webkit-box;
	display:-webkit-flex;
	display:flex;
	-webkit-box-lines:multiple;
	-webkit-flex-wrap:$wrap;
	flex-wrap:$wrap;
	-webkit-justify-content:$justify;
	justify-content:$justify;
	-webkit-box-direction:$direction;
	-webkit-flex-direction:$direction;
	flex-direction:$direction;
}
@mixin flex($val){
	@if type-of($val) == 'list'{
		-webkit-box-flex:nth($val,1);
		flex-grow:nth($val,1);
		flex-shrink: nth($val,2);
		@if length($val) > 2{
			flex-basis:cp_get_size_value(nth($val,3));
		}
		@if length($val) > 3{
			-webkit-order:nth($val,4);
			order:nth($val,4);
		}
	}
	@else{
		@if unitless($val){
			-webkit-box-flex:$val;
			flex-grow:$val;
			flex-shrink:$val;
			flex-basis:$val + px;
		}
		@else{
			flex-basis:$val;
		}
	}
}

@mixin flex_equalize($cols,$max:20){
	& > *{flex-grow: 1;box-sizing: border-box;}
	@for $len from 2 through $max{
		$rows:ceil($len / $cols);
		$w1:percentage(floor(100 / floor($len / $rows)) / 100);
		$w2:percentage(floor(100 / ceil($len / $rows)) / 100);
		$thr:$len - ceil($len / $rows) * ($len % $rows) +1;
		& > *:first-child:nth-last-child(#{$len}),
		& > *:first-child:nth-last-child(#{$len}) ~ *:nth-child(-n + #{$thr - 1}){flex-basis:$w1;}
		& > *:first-child:nth-last-child(#{$len}) ~ *:nth-child(n + #{$thr}){flex-basis:$w2;}
	}
}